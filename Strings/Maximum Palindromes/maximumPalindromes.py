from collections import defaultdict
from copy import copy

s = 'osmovvaggkdiohrbmqrrtednihobbxshoyhoyjzxwmzcypzsykwcwpzrgdzsvvhtbjqxymjegmvpfyfdnzndpvhnsokkvykvtmmp'

letters = [defaultdict(int)]
for ch in s:
    cp = copy(letters[-1])
    cp[ch] += 1
    letters.append(cp)


factorialList = [1]
answer = 1
m = 1000000007
for i in range(1, 50001):
    answer = (answer * i) % m
    factorialList.append(answer)


def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, x, y = egcd(b % a, a)
        return (g, y - (b // a) * x, x)


def mulinv(b, n):
    g, x, _ = egcd(b, n)
    if g == 1:
        return x % n


def palindromicCombinationFormula(a, b):
    m = 1000000007
    numerator = factorialList[a]
    denominator = 1
    denominatorList = [mulinv(factorialList[i], m) for i in b]
    for i in denominatorList:
        denominator = (denominator * i) % m
    return (numerator * denominator) % m


def answerQuery(l, r):
    # Return the answer for this query modulo 1000000007.
    # print(letters[r])
    newDict = copy(letters[r])
    print(newDict)
    palindromicLetters = []
    singleLetters = 0
    for ch in letters[l - 1]:
        if newDict[ch] == letters[l - 1][ch]:
            del newDict[ch]
        else:
            newDict[ch] -= letters[l - 1][ch]
    print(newDict)
    for i in newDict.values():
        if i == 1:
            singleLetters += 1
        elif i > 1:
            if i % 2 != 0:
                singleLetters += 1
            palindromicLetters.append(i // 2)
    if singleLetters == 0:
        singleLetters = 1
    if len(palindromicLetters) == 1 and singleLetters == 1:
        return 1
    else:
        result = ((singleLetters % 1000000007) * palindromicCombinationFormula(sum(palindromicLetters), palindromicLetters)) % 1000000007
        return result


print(answerQuery(93, 95))

index = '''33 33
25 27
22 25
3 5
73 73
27 30
75 76
71 73
46 47
19 22
4 7
93 95
30 31
79 80
97 98
78 79
57 60
5 8
20 22
35 38
79 79
55 57
33 34
66 69
5 5
67 70
12 14
9 12
93 94
73 75
23 23
98 100
58 59
63 66
16 19
97 98
68 68
17 18
36 39
76 77
10 10
50 53
19 20
70 71
34 34
52 54
35 38
21 24
21 21
28 29
61 63
58 58
95 96
65 67
1 2
59 62
26 29
4 4
31 34
14 15
28 30
32 33
58 58
41 41
62 65
56 56
16 18
36 37
17 19
94 97
33 34
59 61
21 23
55 58
71 71
27 29
82 85
76 77
81 82
21 22
87 87
36 39
53 54
56 56
34 36
100 100
78 80
19 19
82 82
97 98
33 36
83 86
40 40
52 55
86 88
17 19
1 4
44 44
76 76
66 68
22 24
25 25
76 76
95 98
33 34
27 28
66 69
54 56
99 100
95 97
55 55
73 75
63 65
63 64
19 22
8 11
89 89
18 20
95 95
9 11
95 97
47 48
45 47
58 61
77 77
16 19
75 78
36 38
6 6
31 34
28 28
86 89
17 19
12 15
40 41
50 53
3 4
86 86
24 24
73 73
3 6
34 36
73 73
22 23
10 10
76 76
58 59
12 14
53 53
66 67
29 32
14 17
30 32
5 8
75 78
85 87
95 98
53 55
50 52
43 46
15 16
7 7
5 5
33 36
58 60
29 30
88 88
22 23
95 96
90 92
81 84
15 18
4 7
58 61
45 48
32 32
65 67
43 44
39 42
24 27
55 57
20 21
96 99
10 11
76 78
42 43
82 83
41 42
36 39
77 79
4 5
50 51
100 100
2 5
30 31
17 19
89 90
36 37
67 67
95 96
31 33
80 82
11 13
78 81
72 73
16 18
91 94
48 51
22 24
69 71
30 33
99 100
44 45
89 89
91 94
97 98
30 30
46 46
45 46
37 37
23 24
19 20
26 28
15 16
31 31
31 32
97 99
63 65
70 73
59 59
89 91
63 64
74 75
1 3
37 38
20 20
2 5
4 5
85 85
28 31
77 79
4 6
86 89
8 10
45 48
60 61
92 92
27 28
46 46
14 14
82 84
90 93
80 82
96 99
66 69
36 39
42 44
98 100
73 75
3 3
58 60
84 84
81 83
40 40
19 21
60 61
75 75
1 3
55 56
78 79
13 16
55 55
13 14
72 72
88 91
96 96
63 66
52 54
2 4
35 36
72 75
25 26
64 67
87 90
14 17
75 77
5 6
41 44
72 75
25 28
72 74
92 95
97 100
2 5
75 77
93 96
85 86
80 80
73 76
68 70
23 23
15 15
51 54
70 73
88 90
10 13
74 76
59 59
39 42
18 21
45 48
10 12
41 42
35 35
32 35
56 56
66 67
3 6
80 80
75 76
45 46
11 12
17 20
43 43
92 95
58 61
22 24
58 59
56 57
90 91
3 4
66 69
3 6
1 3
13 16
37 37
34 34
5 8
74 74
23 26
90 93
25 26
67 67
18 18
20 23
39 42
67 70
86 89
4 6
5 7
35 37
3 4
29 30
9 10
18 20
84 87
16 17
76 78
4 6
46 47
70 70
90 91
44 44
60 60
38 40
15 17
97 99
19 21
67 69
75 75
39 41
21 21
59 61
25 26
96 98
71 72
29 31
89 91
52 53
57 57
3 5
49 50
76 78
55 55
13 15
40 42
76 77
1 1
50 51
93 93
73 74
100 100
63 63
21 21
52 54
27 29
29 29
26 26
21 22
67 70
70 73
93 96
85 87
91 92
46 48
56 57
3 5
17 17
93 95
73 76
64 65
28 29
90 92
32 33
17 18
47 50
72 74
61 63
61 61
76 77
82 85
48 48
43 43
89 90
87 88
32 33
44 47
99 99
80 80
24 25
79 80
54 57
85 85
90 92
26 29
39 39
33 34
3 4
20 22
94 97
47 49
37 39
98 99
66 67
60 63
15 16
50 50
23 23
93 96
77 77
46 46
33 35
60 62
12 13
80 80
36 37
95 98
91 94
65 66
86 89
95 96
14 14
85 87
76 79
75 78
26 29
2 2
61 64
37 39
74 74
22 25
61 61
65 68
3 4
28 29
19 21
19 20
89 89
76 77
64 67
15 18
41 42
51 52
58 59
7 10
67 69
49 52
8 8
43 43
25 27
11 11
41 44
68 71
85 85
60 63
7 8
37 40
55 58
28 30
67 69
52 54
6 8
9 10
82 84
84 85
95 98
51 54
76 77
62 63
61 62
70 71
11 14
70 72
11 14
21 24
51 51
23 24
65 67
24 26
59 61
28 29
9 10
70 73
66 66
1 4
91 93
71 72
11 14
51 51
24 25
64 66
69 72
95 95
57 57
45 45
64 67
73 76
59 59
62 64
43 45
32 32
16 16
65 66
81 84
9 10
64 66
68 71
10 12
79 81
21 24
26 29
3 4
97 100
47 47
98 99
60 60
15 16
70 71
98 98
67 70
52 55
90 90
34 34
47 49
24 27
6 7
5 6
54 56
92 93
27 29
36 36
100 100
99 99
99 100
32 35
32 35
73 75
68 71
78 81
22 23
87 90
34 37
33 34
50 50
60 61
94 94
22 25
50 52
42 44
5 7
63 63
99 99
98 99
100 100
80 83
16 18
56 59
54 57
45 46
20 23
14 15
66 68
59 60
52 53
78 78
69 69
85 88
24 26
79 82
63 63
40 41
20 23
90 91
11 13
39 41
45 47
30 33
89 92
74 76
37 39
59 61
6 9
77 80
91 93
81 81
96 98
29 31
78 78
73 74
18 21
73 74
43 46
8 10
13 15
15 18
42 45
19 21
57 57
29 32
28 28
73 76
88 90
46 47
94 95
14 16
8 8
42 42
90 92
98 100
87 89
65 65
88 89
76 78
15 15
42 45
39 40
21 24
49 49
77 80
71 71
76 78
84 85
82 82
96 97
3 6
57 59
79 80
48 50
98 98
91 92
99 99
88 89
75 78
92 92
68 71
5 6
22 22
83 83
46 48
24 24
67 69
19 21
7 10
87 90
44 47
97 98
40 43
64 65
54 55
41 43
23 23
84 86
32 35
34 34
7 8
74 74
87 90
42 43
57 58
55 58
77 77
58 61
79 80
51 53
62 62
50 53
81 83
82 83
74 76
61 63
52 54
69 70
5 7
75 77
63 65
54 54
83 85
12 13
42 44
31 33
12 12
95 95
83 86
64 65
79 82
92 94
97 97
38 41
41 41
34 37
36 38
28 30
44 46
23 23
75 76
9 11
59 61
27 30
22 25
89 89
85 87
64 66
57 57
74 75
10 10
6 6
63 65
81 84
92 94
29 31
46 49
41 44
100 100
92 92
32 33
19 21
50 51
68 70
79 79
23 25
69 69
74 75
54 54
85 85
100 100
26 27
83 86
46 49
74 77
19 20
13 14
9 10
16 16
5 8
45 47
44 45
87 87
27 29
17 19
65 66
72 74
23 24
21 24
92 93
67 69
75 78
99 99
96 96
59 62
67 67
96 99
71 74
48 50
44 45
25 25
5 5
94 97
7 7
11 11
48 49
20 21
83 84
86 88
62 62
86 86
4 4
1 2
82 84
94 94
84 86
4 7
96 97
32 34
73 75
49 51
89 91
96 98
18 19
74 76
33 36
78 80
46 47
69 72
43 45
58 60
52 53
17 18
21 21
57 58
92 94
7 9
55 57
54 55
81 81
20 22
64 64
64 65
54 55
26 27
62 64
57 60
65 67
60 62
91 91
12 15
94 96
65 65
56 58
68 68
88 88
91 92
94 95
28 31
9 9
57 57
85 86
19 22
73 76
68 69
78 79
52 52
80 82
69 69
26 26
98 98
14 17
71 72
86 87
60 61
18 18
22 22
38 39
18 21
9 10
96 98
81 84
79 81
31 33
35 36
49 51
75 77
32 33
48 50
20 23
52 55
16 17
45 48
70 71
35 37
100 100
39 39
99 99
8 9
13 13
62 65
45 48
11 11
33 35
53 56
94 96
2 3
82 84
70 70
94 95
61 63
62 64
53 54
10 13
86 87
20 22
77 80
81 84
48 51
70 70
76 76
8 10
69 69
94 96
12 15
7 9
41 43
95 95
58 59
3 3
60 62
37 37
98 99
29 29
87 87
26 27
48 49
79 81
3 6
36 37
35 35
90 91
77 78
37 37
38 40
5 7
63 63
88 91
49 50
59 60
41 41
72 74
92 93
40 41
45 47
33 36
52 53
24 24
83 83
9 10
85 86
57 60
97 99
83 85
67 68
84 84
23 25
92 92
44 46
80 83
52 54
73 74
71 74
66 66
63 66
39 41
27 27
85 86
98 100
10 13
18 18
76 77
41 43
34 35
68 69
5 5
98 98
80 81
90 91
38 38
11 12
13 14
2 3
54 55
85 86
85 88
18 20
1 1
14 16
94 96
4 6
98 98
96 97
81 81
28 29
4 7'''

# strIndexes = [i.split() for i in index.split('\n')]
# for i in strIndexes:
#     x, y = i
#     x, y = int(x), int(y)
# print(answerQuery(x, y))
